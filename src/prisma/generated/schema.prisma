// ──────────────────────────────────────────────────────────────────────────────
//  Prisma Client generator
// ──────────────────────────────────────────────────────────────────────────────
generator client {
  provider        = "prisma-client-js"
  output          = "./generated/"
  previewFeatures = ["driverAdapters"]
}

// ──────────────────────────────────────────────────────────────────────────────
//  Datasource (PostgreSQL - change provider/url to suit)
// ──────────────────────────────────────────────────────────────────────────────
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ──────────────────────────────────────────────────────────────────────────────
//  ENUMS – mirror the TypeScript domain enums
// ──────────────────────────────────────────────────────────────────────────────
enum UserRole {
  customer
  admin
}

enum ProductStatus {
  pre_order
  available
  out_of_stock
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  refunded
}

enum ShipmentStatus {
  preparing
  in_transit
  delivered
  returned
}

// ──────────────────────────────────────────────────────────────────────────────
//  USERS & AUTH
// ──────────────────────────────────────────────────────────────────────────────
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(customer)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  carts  Cart[]
  orders Order[]
  Coupon Coupon[]

  @@index([role])
}

// ──────────────────────────────────────────────────────────────────────────────
//  CATALOGUE
// ──────────────────────────────────────────────────────────────────────────────
model Product {
  id          String        @id @default(uuid())
  title       String
  description String
  basePrice   Int
  images      String[]      @default([])
  status      ProductStatus @default(available)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  options    ProductOption[]
  categories ProductCategory[]
  CartItem   CartItem[]
  OrderItem  OrderItem[]

  @@index([status])
}

model ProductOption {
  id        String      @id @default(uuid())
  attribute String
  value     String
  stock     Int
  extra     Int         @default(0)
  sku       String      @unique
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
  OrderItem OrderItem[]

  @@unique([productId, attribute, value])
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  products ProductCategory[]
}

model ProductCategory {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

// ──────────────────────────────────────────────────────────────────────────────
//  SHOPPING CART  (persists a live cart per user; can be skipped if you
//                  prefer an in-memory/Redis cart, but it’s handy for SSG)
// ──────────────────────────────────────────────────────────────────────────────
model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id              String  @id @default(uuid())
  title           String
  cartId          String
  productId       String
  productOptionId String?
  quantity        Int     @default(1)
  basePrice       Int     @default(0)
  extraPrice      Int     @default(0)

  cart          Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product        @relation(fields: [productId], references: [id])
  productOption ProductOption? @relation(fields: [productOptionId], references: [id])

  @@unique([cartId, productId, productOptionId])
}

// ──────────────────────────────────────────────────────────────────────────────
//  ORDERS  (snapshot of the cart at purchase time)
// ──────────────────────────────────────────────────────────────────────────────
model Order {
  id        String      @id @default(uuid())
  userId    String
  total     Int
  status    OrderStatus @default(pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    OrderItem[]
  invoice  Invoice?
  shipment Shipment?

  @@index([status])
}

model OrderItem {
  id              String  @id @default(uuid())
  orderId         String
  productId       String
  productOptionId String?
  titleSnapshot   String
  priceSnapshot   Decimal @db.Decimal(10, 2)
  quantity        Int

  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product        @relation(fields: [productId], references: [id])
  productOption ProductOption? @relation(fields: [productOptionId], references: [id])
}

// ──────────────────────────────────────────────────────────────────────────────
//  INVOICES
// ──────────────────────────────────────────────────────────────────────────────
model Invoice {
  id         String   @id @default(uuid())
  orderId    String   @unique
  taxRate    Decimal  @db.Decimal(5, 4) // e.g. 0.10 = 10 %
  totalNet   Decimal  @db.Decimal(12, 2)
  totalGross Decimal  @db.Decimal(12, 2)
  issuedAt   DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// ──────────────────────────────────────────────────────────────────────────────
//  SHIPMENTS
// ──────────────────────────────────────────────────────────────────────────────
model Shipment {
  id             String         @id @default(uuid())
  orderId        String         @unique
  carrier        String
  trackingNumber String         @unique
  status         ShipmentStatus @default(preparing)
  shippedAt      DateTime?
  eta            DateTime?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// ──────────────────────────────────────────────────────────────────────────────
//  DISCOUNTS & COUPONS  (flexible design; extend as needed)
// ──────────────────────────────────────────────────────────────────────────────
model Discount {
  id          String    @id @default(uuid())
  code        String    @unique
  description String?
  percentage  Decimal   @db.Decimal(5, 2) // 10.00 = 10 %
  amountOff   Decimal   @default(0) @db.Decimal(10, 2)
  startsAt    DateTime  @default(now())
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Coupon Coupon[]
}

model Coupon {
  id         String    @id @default(uuid())
  code       String    @unique
  userId     String?
  discountId String
  redeemedAt DateTime?

  discount Discount @relation(fields: [discountId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}
